
import numpy as np
import matplotlib.pyplot as plt

# サイン波のパラメータ定義
sampling_rate = 1000  # サンプリングレート (Hz)
duration = 1.0  # サイン波の持続時間 (秒)
frequency = 5.0  # サイン波の周波数 (Hz)
amplitude = 1.0  # サイン波の振幅

# 1. サイン波の生成
t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)  # 時間配列
sine_wave = amplitude * np.sin(2 * np.pi * frequency * t)  # サイン波: A * sin(2πft)

# 2. フーリエ変換の近似
omega = np.linspace(-2 * np.pi * 10, 2 * np.pi * 10, 500)  # ±10Hzの範囲をラジアン/秒で表現
delta_pos = np.exp(-((omega - 2 * np.pi * frequency) ** 2) / 0.1)  # ガウス関数で正のピークを近似
delta_neg = np.exp(-((omega + 2 * np.pi * frequency) ** 2) / 0.1)  # ガウス関数で負のピークを近似
f_omega = delta_pos - delta_neg  # サイン波のフーリエ変換を近似

# 3. 4ビットADC変換
adc_bits = 4  # ADC解像度 (4ビット)
adc_levels = 2**adc_bits  # 量子化レベル数 (16レベル)
adc_min = -amplitude  # ADCの最小値
adc_max = amplitude   # ADCの最大値
adc_step = (adc_max - adc_min) / adc_levels  # 量子化ステップ
quantized_wave = np.round((sine_wave - adc_min) / adc_step) * adc_step + adc_min  # 量子化信号

# 4. FFT (高速フーリエ変換) とパワースペクトル
fft_result = np.fft.fft(quantized_wave)  # FFT計算
fft_magnitude = np.abs(fft_result)[:len(fft_result) // 2]  # 振幅スペクトル
power_spectrum = (fft_magnitude ** 2) / len(quantized_wave)  # パワースペクトル
frequencies = np.fft.fftfreq(len(quantized_wave), d=1/sampling_rate)[:len(fft_result) // 2]  # 周波数配列

# パワースペクトルをデシベル単位で計算 (小さなオフセットを追加してゼロ除算を防止)
power_spectrum_db = 10 * np.log10(power_spectrum + 1e-12)  # オフセット: 1e-12

# 5. SNR (Signal-to-Noise Ratio) 計算
signal_power = np.max(power_spectrum)  # 信号成分のパワー
noise_power = np.sum(power_spectrum) - signal_power  # ノイズ成分のパワー
snr = 10 * np.log10(signal_power / noise_power)  # SNRをデシベル単位で計算

# 6. SFDR (Spurious-Free Dynamic Range) 計算
sorted_peaks = np.sort(power_spectrum)[::-1]  # パワースペクトルを降順にソート
spurious_peak = sorted_peaks[1]  # 2番目に大きいピークをスプリアス成分とする
sfdr = 10 * np.log10(signal_power / spurious_peak)  # SFDRをデシベル単位で計算

# 7. プロット
plt.figure(figsize=(14, 12))

# サイン波と量子化信号のプロット
plt.subplot(3, 1, 1)
plt.plot(t, sine_wave, label="Original Sine Wave")
plt.plot(t, quantized_wave, label="Quantized Signal (4-bit ADC)", linestyle="--")
plt.title("Sine Wave and Quantized Signal (Time Domain).png")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.legend()
plt.grid()

# フーリエ変換近似のプロット
plt.subplot(3, 1, 2)
plt.plot(omega, delta_pos, label=r"$\delta(\omega - 2\pi f_0)$ (approx.)", linestyle="--")
plt.plot(omega, delta_neg, label=r"$\delta(\omega + 2\pi f_0)$ (approx.)", linestyle="--")
plt.plot(omega, f_omega, label=r"$\hat{f}(\omega)$ (approx.)")
plt.title("Fourier Transform Approximation (Frequency Domain).png")
plt.xlabel("Frequency $\omega$ (rad/s)")
plt.ylabel("Amplitude")
plt.axhline(0, color="black", linewidth=0.5, linestyle="--")
plt.legend()
plt.grid()

# パワースペクトルのプロット
plt.subplot(3, 1, 3)
plt.plot(frequencies, power_spectrum_db, label="Power Spectrum (dB)")
plt.title("Power Spectrum (4-bit Quantized Signal).png")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Power (dB)")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()

# 8. 結果をコンソール出力
print(f"Signal-to-Noise Ratio (SNR): {snr:.2f} dB")
print(f"Spurious-Free Dynamic Range (SFDR): {sfdr:.2f} dB")


