import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq
from scipy.signal import butter, filtfilt

# パラメータ設定
sampling_rate = 10000  # サンプリングレート (Hz)
duration = 0.02         # 波形の持続時間 (秒)
frequency = 50          # 基本周波数 (Hz)
amplitude = 1.0         # 振幅 (V)
phase = 0.0             # 位相 (ラジアン)
noise_level = 0.01      # 小さいノイズレベル (RMS)
harmonic_amplitude = 0.2  # 高調波の振幅
frequency_jitter = 0.02    # 周波数揺らぎ（%）
distortion_factor = 0.3    # 非線形歪みの強さ
powerline_noise_amplitude = 0.05  # 電源ノイズの振幅（50Hz）

# 10ビットAD変換の設定
adc_bits = 10  # ADC解像度 (10ビット)
adc_levels = 2 ** adc_bits  # 量子化レベル数 (1024レベル)
adc_min = -amplitude  # ADCの最小値
adc_max = amplitude   # ADCの最大値
adc_step = (adc_max - adc_min) / adc_levels  # 量子化ステップ

# 時間軸
t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)

# 1. 理想的なサイン波
ideal_wave = amplitude * np.sin(2 * np.pi * frequency * t + phase)

# 2. 現実のサイン波（ノイズ + 高調波 + 周波数揺らぎ + 非線形歪み + 電源ノイズ）
# 2.1 小さいランダムなホワイトノイズを加える
noise = np.random.normal(0, noise_level, size=t.shape)

# 2.2 高調波（例: 3次高調波）を加える
harmonic = harmonic_amplitude * np.sin(2 * np.pi * frequency * 3 * t)

# 2.3 周波数の揺らぎを加える
jittered_frequency = frequency * (1 + frequency_jitter * np.sin(2 * np.pi * 1 * t))  # 低周波数変動
jittered_wave = amplitude * np.sin(2 * np.pi * jittered_frequency * t + phase)

# 2.4 非線形歪みを加える
# 歪み: 入力波形の3次成分を加える（非線形関数のモデル化）
distorted_wave = jittered_wave + distortion_factor * (jittered_wave ** 3)

# 2.5 電源ノイズを加える（50Hzのピークを持つノイズ）
powerline_noise = powerline_noise_amplitude * np.sin(2 * np.pi * 50 * t)  # 50Hzの電源ノイズ

# 2.6 現実のサイン波を合成
measured_wave = distorted_wave + noise + harmonic + powerline_noise

# 3. 10ビットAD変換（量子化）
quantized_wave = np.round((measured_wave - adc_min) / adc_step) * adc_step + adc_min

# 4. FFTの計算関数
def compute_fft(signal, sampling_rate):
    N = len(signal)
    yf = fft(signal)
    xf = fftfreq(N, 1 / sampling_rate)
    # 正の周波数のみを取得
    idx = np.where(xf >= 0)
    return xf[idx], np.abs(yf[idx]) * 2.0 / N  # 振幅スケーリング

# 5. FFTの計算
xf_ideal, yf_ideal = compute_fft(ideal_wave, sampling_rate)
xf_measured, yf_measured = compute_fft(quantized_wave, sampling_rate)

# 6. ローパスフィルタの設計
def butter_lowpass_filter(data, cutoff, fs, order=5):
    nyq = 0.5 * fs  # ナイキスト周波数
    normal_cutoff = cutoff / nyq
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    y = filtfilt(b, a, data)
    return y

# フィルタのパラメータ
cutoff_freq = 200  # カットオフ周波数 (Hz)

# FFTスペクトルにフィルタを適用
yf_measured_filtered = butter_lowpass_filter(yf_measured, cutoff_freq, sampling_rate)

# 7. プロット
plt.figure(figsize=(14, 16))

# 7.1 理想的なサイン波（時間領域）
plt.subplot(4, 1, 1)
plt.plot(t, ideal_wave, label="Ideal Sine Wave", color="blue", linewidth=2)
plt.title("Ideal Sine Wave (Time Domain)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (V)")
plt.legend()
plt.grid()

# 7.2 現実のサイン波（時間領域）
plt.subplot(4, 1, 2)
plt.plot(t, measured_wave, label="Measured Sine Wave", color="orange", linewidth=2)
plt.title("Measured Sine Wave (Time Domain)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (V)")
plt.legend()
plt.grid()

# 7.3 10ビットAD変換後のサイン波（時間領域）
plt.subplot(4, 1, 3)
plt.plot(t, quantized_wave, label="Quantized Sine Wave (10-bit ADC)", color="green", linewidth=2)
plt.title("Quantized Sine Wave (10-bit ADC) (Time Domain)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (V)")
plt.legend()
plt.grid()

# 7.4 理想的なサイン波のFFTスペクトルと量子化後のFFTスペクトル
plt.subplot(4, 1, 4)
plt.stem(xf_ideal, yf_ideal, linefmt='blue', markerfmt='C0o', basefmt=" ", label="Ideal FFT")
plt.stem(xf_measured, yf_measured, linefmt='orange', markerfmt='C1o', basefmt=" ", label="Measured FFT (with Noise, Harmonics, etc.)")
plt.stem(xf_measured, yf_measured_filtered, linefmt='green', markerfmt='C2o', basefmt=" ", label="Filtered FFT (Lowpass)")
plt.title("FFT of Ideal and Measured Sine Waves (Frequency Domain)")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.xlim(0, frequency * 5)  # 主要な周波数成分を表示
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()
