import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, ifft, fftfreq
import cv2
from numpy.fft import fft2, fftshift, ifft2

# ----- 1. オーディオ信号処理（ノイズ除去） -----
def audio_signal_processing():
    # サンプリング設定
    sampling_rate = 1000  # Hz
    T = 1.0  # 秒
    t = np.linspace(0, T, int(sampling_rate * T), endpoint=False)  # 時間軸

    # 音声信号（サイン波）とノイズの生成
    frequency = 50  # 信号の周波数
    clean_signal = np.sin(2 * np.pi * frequency * t)
    noise = 0.4 * np.random.normal(size=t.shape)
    noisy_signal = clean_signal + noise

    # フーリエ変換
    fft_result = fft(noisy_signal)
    frequencies = fftfreq(len(t), 1 / sampling_rate)

    # ノイズ除去（周波数フィルタリング）
    fft_result[np.abs(frequencies) > 100] = 0  # 高周波成分を除去
    filtered_signal = ifft(fft_result)

    # プロット
    plt.figure(figsize=(14, 8))
    plt.subplot(3, 1, 1)
    plt.plot(t, noisy_signal)
    plt.title("Noisy Signal")
    plt.subplot(3, 1, 2)
    plt.plot(t, clean_signal)
    plt.title("Original Signal")
    plt.subplot(3, 1, 3)
    plt.plot(t, filtered_signal.real)
    plt.title("Filtered Signal (Noise Removed)")
    plt.tight_layout()
    plt.show()

# ----- 2. 画像処理（ぼかし） -----
def image_processing():
    # グレースケール画像の読み込み
    image = cv2.imread("sample_image.jpg", cv2.IMREAD_GRAYSCALE)

    # 2次元フーリエ変換と周波数シフト
    f_transform = fft2(image)
    f_shift = fftshift(f_transform)

    # ローパスフィルタの適用
    rows, cols = image.shape
    crow, ccol = rows // 2, cols // 2
    mask = np.zeros((rows, cols), np.uint8)
    mask[crow - 30:crow + 30, ccol - 30:ccol + 30] = 1
    filtered = f_shift * mask

    # 逆フーリエ変換
    f_ishift = np.fft.ifftshift(filtered)
    img_filtered = np.abs(ifft2(f_ishift))

    # プロット
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap="gray")
    plt.title("Original Image")
    plt.subplot(1, 2, 2)
    plt.imshow(img_filtered, cmap="gray")
    plt.title("Blurred Image")
    plt.tight_layout()
    plt.show()

# ----- 3. 通信工学（信号スペクトル解析） -----
def communication_signal_analysis():
    # サンプリング設定
    sampling_rate = 1000  # Hz
    T = 1.0  # 秒
    t = np.linspace(0, T, int(sampling_rate * T), endpoint=False)  # 時間軸

    # 無線信号のシミュレーション
    signal = np.sin(2 * np.pi * 10 * t) + 0.5 * np.sin(2 * np.pi * 50 * t)
    fft_result = fft(signal)
    frequencies = fftfreq(len(t), 1 / sampling_rate)

    # プロット
    plt.figure(figsize=(12, 6))
    plt.plot(frequencies[:len(frequencies) // 2], np.abs(fft_result)[:len(frequencies) // 2])
    plt.title("Frequency Spectrum of Wireless Signal")
    plt.xlabel("Frequency (Hz)")
    plt.ylabel("Magnitude")
    plt.grid()
    plt.show()

# ----- 4. 振動解析（異常検出） -----
def vibration_analysis():
    # サンプリング設定
    sampling_rate = 1000  # Hz
    T = 1.0  # 秒
    t = np.linspace(0, T, int(sampling_rate * T), endpoint=False)  # 時間軸

    # 正常な振動信号
    normal_vibration = np.sin(2 * np.pi * 10 * t)

    # 異常な振動（追加された高周波成分）
    abnormal_vibration = normal_vibration + 0.5 * np.sin(2 * np.pi * 100 * t)

    # フーリエ変換
    fft_normal = fft(normal_vibration)
    fft_abnormal = fft(abnormal_vibration)
    frequencies = fftfreq(len(t), 1 / sampling_rate)

    # プロット
    plt.figure(figsize=(14, 8))
    plt.subplot(2, 1, 1)
    plt.plot(frequencies[:len(frequencies) // 2], np.abs(fft_normal)[:len(frequencies) // 2])
    plt.title("Frequency Spectrum of Normal Vibration")
    plt.subplot(2, 1, 2)
    plt.plot(frequencies[:len(frequencies) // 2], np.abs(fft_abnormal)[:len(frequencies) // 2])
    plt.title("Frequency Spectrum of Abnormal Vibration")
    plt.tight_layout()
    plt.show()

# ----- 全体の実行 -----
if __name__ == "__main__":
    print("1. オーディオ信号処理（ノイズ除去）")
    audio_signal_processing()

    print("2. 画像処理（ぼかし）")
    # 注意: 画像 "sample_image.jpg" を同じディレクトリに配置してください
    # image_processing()

    print("3. 通信工学（信号スペクトル解析）")
    communication_signal_analysis()

    print("4. 振動解析（異常検出）")
    vibration_analysis()
