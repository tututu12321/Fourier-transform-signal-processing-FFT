import numpy as np
import matplotlib.pyplot as plt

# サンプル信号とノイズの生成
fs = 1000  # サンプリング周波数 (Hz)
t = np.linspace(0, 1, fs)  # 時間ベクトル (1秒間)
f_signal = 50  # 信号の周波数 (Hz)
f_noise = 100  # ノイズの周波数 (Hz)

# 信号生成（純粋なサイン波）
signal = np.sin(2 * np.pi * f_signal * t)

# ノイズ生成（異なる周波数のサイン波をノイズとして追加）
noise = 0.5 * np.sin(2 * np.pi * f_noise * t)

# ノイズを加えた信号
noisy_signal = signal + noise

# ノイズキャンセリングのためのバンドパスフィルタ（ノイズ成分を除去）
from scipy.signal import butter, filtfilt

# バンドパスフィルタの設計 (ノイズ成分の周波数帯域を除去)
low_cutoff = 40  # 低域カットオフ (Hz)
high_cutoff = 60  # 高域カットオフ (Hz)

# バターワースフィルタを設計
b, a = butter(4, [low_cutoff / (0.5 * fs), high_cutoff / (0.5 * fs)], btype='band')

# フィルタを適用
filtered_signal = filtfilt(b, a, noisy_signal)

# グラフ表示
plt.figure(figsize=(12, 6))
plt.subplot(3, 1, 1)
plt.plot(t, noisy_signal)
plt.title('Noisy Signal')
plt.subplot(3, 1, 2)
plt.plot(t, filtered_signal)
plt.title('Filtered Signal (Noise Removed)')
plt.subplot(3, 1, 3)
plt.plot(t, signal)
plt.title('Original Signal')
plt.tight_layout()
plt.show()
