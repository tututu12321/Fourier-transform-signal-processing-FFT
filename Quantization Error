import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq

# サンプリング設定
sampling_rate = 1000  # サンプリング周波数（Hz）
T = 1.0  # 信号の長さ（秒）
t = np.linspace(0, T, int(sampling_rate * T), endpoint=False)  # 時間軸

# 入力信号の設定
frequency = 50  # 信号の周波数（Hz）
amplitude = 1.0  # 振幅
input_signal = amplitude * np.sin(2 * np.pi * frequency * t)  # 正弦波信号

# ADCの設定
adc_bits = 8  # ADCのビット数
adc_levels = 2**adc_bits  # 量子化レベル数
adc_min, adc_max = -1.0, 1.0  # ADCの入力範囲

# 量子化関数
def quantize(signal, levels, v_min, v_max):
    """信号を指定した量子化レベルで量子化する"""
    step = (v_max - v_min) / levels
    quantized_signal = np.round((signal - v_min) / step) * step + v_min
    return np.clip(quantized_signal, v_min, v_max)

# 信号を量子化
quantized_signal = quantize(input_signal, adc_levels, adc_min, adc_max)

# FFTの計算
fft_input = fft(input_signal)  # 元の信号のFFT
fft_quantized = fft(quantized_signal)  # 量子化後の信号のFFT
frequencies = fftfreq(len(t), 1 / sampling_rate)  # 周波数軸

# プロット
plt.figure(figsize=(14, 8))

# 入力信号のプロット
plt.subplot(3, 2, 1)
plt.plot(t, input_signal, label="Original Signal")
plt.title("Original Signal")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.grid()
plt.legend()

# 量子化信号のプロット
plt.subplot(3, 2, 2)
plt.step(t, quantized_signal, label="Quantized Signal", where='mid')
plt.title(f"Quantized Signal (ADC: {adc_bits} bits)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.grid()
plt.legend()

# FFTの振幅スペクトル（元の信号）
plt.subplot(3, 2, 3)
plt.stem(frequencies[:len(frequencies)//2], np.abs(fft_input[:len(frequencies)//2]), basefmt=" ", label="Original Signal FFT")
plt.title("FFT of Original Signal")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")
plt.grid()
plt.legend()

# FFTの振幅スペクトル（量子化信号）
plt.subplot(3, 2, 4)
plt.stem(frequencies[:len(frequencies)//2], np.abs(fft_quantized[:len(frequencies)//2]), basefmt=" ", label="Quantized Signal FFT", linefmt='r-', markerfmt='ro')
plt.title("FFT of Quantized Signal")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")
plt.grid()
plt.legend()

# 量子化誤差のプロット
quantization_error = input_signal - quantized_signal
plt.subplot(3, 1, 3)
plt.plot(t, quantization_error, label="Quantization Error", color='orange')
plt.title("Quantization Error")
plt.xlabel("Time (s)")
plt.ylabel("Error")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
