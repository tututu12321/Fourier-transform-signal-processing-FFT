
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq

# 矩形波の定義
def rectangular_wave(theta):
    """矩形波を生成する関数"""
    return np.sign(np.sin(theta))  # 符号付き正弦波から矩形波を生成

# フーリエ級数展開
def fourier_series(theta, N):
    """
    矩形波のフーリエ級数展開を計算する関数
    - theta: 角度（ラジアン）
    - N: 展開項数
    """
    Vm = 1.0  # 矩形波の振幅
    result = np.zeros_like(theta)  # 結果を初期化
    for n in range(1, N + 1):
        # フーリエ級数の各項を計算し加算
        result += (4 * Vm / np.pi) * (1 / (2 * n - 1)) * np.sin((2 * n - 1) * theta)
    return result

# 設定
theta = np.linspace(0, 2 * np.pi, 1000)  # 角度範囲（0から2π）
N = 50  # フーリエ級数展開の項数

# 矩形波のフーリエ級数近似を計算
approx_wave = fourier_series(theta, N)

# フーリエ級数近似波形のFFTを計算
approx_fft = fft(approx_wave)  # 高速フーリエ変換
approx_fft_magnitude = np.abs(approx_fft[:len(theta) // 2])  # 正の周波数成分のみを取得
approx_fft_freqs = fftfreq(len(theta), (theta[1] - theta[0]) / (2 * np.pi))[:len(theta) // 2]  # 周波数

# 結果のプロット
plt.figure(figsize=(14, 6))

# フーリエ級数近似のプロット
plt.subplot(1, 2, 1)
plt.plot(theta, approx_wave, label=f"Fourier Series Approximation (N={N})", linestyle="--", linewidth=2)
plt.title("Fourier Series Approximation of Rectangular Wave (N=50)")  # グラフのタイトル（英語）
plt.xlabel("Angle θ (radians)")  # x軸のラベル
plt.ylabel("Amplitude v(θ)")  # y軸のラベル
plt.legend()  # 凡例を表示
plt.grid()  # グリッド線を表示

# フーリエ級数近似のFFTプロット
plt.subplot(1, 2, 2)
plt.stem(approx_fft_freqs, approx_fft_magnitude, basefmt=" ", label="FFT of Fourier Series Approximation")
plt.title("FFT of Fourier Series Approximation (N=50)")  # グラフのタイトル（英語）
plt.xlabel("Frequency (Hz)")  # x軸のラベル
plt.ylabel("Magnitude")  # y軸のラベル
plt.legend()  # 凡例を表示
plt.grid()  # グリッド線を表示

# レイアウトを調整してプロットを表示
plt.tight_layout()
plt.show()
